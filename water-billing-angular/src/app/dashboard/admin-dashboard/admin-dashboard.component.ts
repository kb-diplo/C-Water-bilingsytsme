import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, Router } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import { environment } from '../../../environments/environment';
import { AuthService } from '../../core/services/auth.service';

interface DashboardStats {
  clients: number;
  bills: number;
  totalRevenue: number;
  outstandingPayments: number;
  paidBillsCount: number;
  pendingBillsCount: number;
  overdueBillsCount: number;
  meterReadersCount: number;
}

@Component({
  selector: 'app-admin-dashboard',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './admin-dashboard.component.html',
  styleUrls: ['./admin-dashboard.component.scss']
})
export class AdminDashboardComponent implements OnInit {
  private apiUrl = environment.apiUrl;
  currentUser: any = null;
  loading = true;
  stats: any = {
    clients: 0,
    bills: 0,
    totalRevenue: 0,
    outstandingPayments: 0,
    paidBillsCount: 0,
    pendingBillsCount: 0,
    overdueBillsCount: 0,
    meterReadersCount: 0
  };
  ongoingBills: any[] = [];

  constructor(
    private http: HttpClient,
    private authService: AuthService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.currentUser = this.authService.getCurrentUser();
    // Verify user has admin role
    if (!this.authService.isAdmin()) {
      // Redirect to appropriate dashboard based on role
      if (this.currentUser?.role === 'MeterReader') {
        window.location.href = '/dashboard/meter-reader';
      } else if (this.currentUser?.role === 'Client') {
        window.location.href = '/dashboard/client';
      } else {
        this.authService.logout();
      }
      return;
    }
    this.loadDashboardData();
  }

  logout(): void {
    this.authService.logout();
    this.router.navigate(['/login']);
  }

  generateReport(): void {
    // Generate comprehensive system report
    const reportData = {
      generatedDate: new Date().toLocaleDateString(),
      totalClients: this.stats.clients,
      totalBills: this.stats.bills,
      totalRevenue: this.stats.totalRevenue,
      outstandingPayments: this.stats.outstandingPayments,
      paidBills: this.stats.paidBillsCount,
      pendingBills: this.stats.pendingBillsCount,
      overdueBills: this.stats.overdueBillsCount,
      meterReaders: this.stats.meterReadersCount
    };

    const reportContent = this.formatReportContent(reportData);
    this.downloadReport(reportContent, `system-report-${new Date().toISOString().split('T')[0]}.txt`);
  }

  private formatReportContent(data: any): string {
    return `WATER BILLING SYSTEM - COMPREHENSIVE REPORT
` +
           `Generated: ${data.generatedDate}
` +
           `==========================================

` +
           `SYSTEM OVERVIEW:
` +
           `- Total Clients: ${data.totalClients}
` +
           `- Total Bills: ${data.totalBills}
` +
           `- Total Revenue: Ksh ${data.totalRevenue.toLocaleString()}
` +
           `- Outstanding Payments: Ksh ${data.outstandingPayments.toLocaleString()}
` +
           `- Meter Readers: ${data.meterReaders}

` +
           `BILL STATUS BREAKDOWN:
` +
           `- Paid Bills: ${data.paidBills}
` +
           `- Pending Bills: ${data.pendingBills}
` +
           `- Overdue Bills: ${data.overdueBills}

` +
           `FINANCIAL SUMMARY:
` +
           `- Collection Rate: ${((data.paidBills / data.totalBills) * 100).toFixed(1)}%
` +
           `- Outstanding Rate: ${((data.overdueBills / data.totalBills) * 100).toFixed(1)}%

` +
           `Report generated by DENKAM Water Billing System`;
  }

  private downloadReport(content: string, fileName: string): void {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = fileName;
    link.click();
    window.URL.revokeObjectURL(url);
  }

  loadDashboardData(): void {
    // Load clients count
    this.http.get<any[]>(`${this.apiUrl}/clients`).subscribe({
      next: (clients) => {
        this.stats.clients = clients?.length || 0;
      },
      error: (error) => {
        if (!environment.production) {
          console.error('Error loading clients:', error);
        }
        this.stats.clients = 0;
      }
    });

    // Load bills data
    this.http.get<any[]>(`${this.apiUrl}/bills`).subscribe({
      next: (bills) => {
        this.stats.bills = bills?.length || 0;
        this.stats.paidBillsCount = bills?.filter(b => b.status === 'Paid').length || 0;
        this.stats.pendingBillsCount = bills?.filter(b => b.status === 'Pending').length || 0;
        this.stats.overdueBillsCount = bills?.filter(b => b.status === 'Overdue').length || 0;
        this.ongoingBills = bills?.filter(bill => bill.status !== 'Paid').slice(0, 5) || [];
      },
      error: (error) => {
        if (!environment.production) {
          console.error('Error loading bills:', error);
        }
        this.stats.bills = 0;
        this.stats.paidBillsCount = 0;
        this.stats.pendingBillsCount = 0;
        this.stats.overdueBillsCount = 0;
        this.ongoingBills = [];
      }
    });

    // Load payments data
    this.http.get<any[]>(`${this.apiUrl}/payments`).subscribe({
      next: (payments) => {
        this.stats.totalRevenue = payments?.reduce((sum, payment) => sum + (payment.amount || 0), 0) || 0;
      },
      error: (error) => {
        if (!environment.production) {
          console.error('Error loading payments:', error);
        }
        this.stats.totalRevenue = 0;
      }
    });

    // Load users count (for meter readers)
    this.http.get<any[]>(`${this.apiUrl}/auth/users`).subscribe({
      next: (users) => {
        this.stats.meterReadersCount = users.filter(u => u.role === 'MeterReader').length;
      },
      error: (error) => {
        if (!environment.production) {
          console.error('Error loading users:', error);
        }
      }
    });

    // Calculate outstanding payments from unpaid bills
    this.http.get<any[]>(`${this.apiUrl}/bills`).subscribe({
      next: (bills) => {
        this.stats.outstandingPayments = bills
          .filter(b => b.status !== 'Paid')
          .reduce((sum, bill) => sum + bill.totalAmount, 0);
      },
      error: (error) => {
        if (!environment.production) {
          console.error('Error calculating outstanding payments:', error);
        }
      }
    });
  }
}
